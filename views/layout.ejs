<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.min.css">
    <!--STYLES END-->
  </head>

  <body>
    <div class='navbar navbar-inverse'>
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class='navbar-brand' href='/'>Coach Chu</a>
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <% if (session.authenticated) { %>
            <% if (session.User.admin) { %>
              <li><a href="/user">All users</a></li>
            <% } %>
            <li class="active"><a href="/user/show/<%= session.User.id %>"><%= session.User.name %> </a> </li>
          <% } %>
        </ul>
        <% if (session.authenticated) { %>
          <div class="navbar-right">
            <a class="btn btn-default navbar-btn navbar-right" href="/session/destroy">sign-out</a>
          </div>
        <% } %>
        <% if (!session.authenticated) { %>
          <form class="navbar-form navbar-right" action="/session/create">
            <div class="form-group">
              <input type="text" placeholder="Email" name="email" class="form-control">
            </div>
            <div class="form-group">
              <input type="password" placeholder="Password" name="password" class="form-control">
            </div>
            <button type="submit" class="btn btn-success">Sign in</button>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </form>
        <% } %>
      </div>
    </div>

    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/libs/socket.io.js"></script>
    <script src="/linker/js/libs/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/libs/jquery-1.10.2.min.js"></script>
    <script src="/linker/js/libs/bootstrap.min.js"></script>
    <script src="/linker/js/libs/handlebars-1.1.2.js"></script>
    <script src="/linker/js/libs/ember-1.2.0.js"></script>
    <script src="/linker/js/libs/ember-data.js"></script>
    <!--SCRIPTS END-->
    <%- body %>
  </body>
</html>
